{"version":3,"sources":["dmAppointment.ts","mkapp.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","BooleanGrammar","clarity","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","wholeday","wholeday_is_confirmed","Determination_time","confirm_time","create_appointment","dmMkapp","statement","invok_guery","invoke","id","src","event","nluRequest","fetch","Request","proxyUrl","method","headers","body","then","data","json","onDone","rasa_finder","intent","name","console","log","onError","select","appointment","TODO_item","timer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"+PAKO,SAASA,EAAIC,GAChB,OAAOC,aAAMC,IAAD,CAA6BC,KAAM,QAASC,MAAOJ,MAG5D,SAASK,IACZ,OAAOJ,YAAK,UAGhB,MAAMK,EAAiF,CAEnF,KAAQ,CAAEC,OAAQ,kBAClB,OAAU,CAAEA,OAAQ,gBACpB,OAAU,CAAEA,OAAQ,gBACpB,MAAS,CAAEA,OAAQ,kBACnB,IAAO,CAAEA,OAAQ,cACjB,KAAQ,CAAEA,OAAQ,cAClB,MAAS,CAAEA,OAAQ,gBAGnB,YAAa,CAAEC,IAAK,UACpB,OAAU,CAAEA,IAAK,UACjB,aAAc,CAAEA,IAAK,UACrB,QAAW,CAAEA,IAAK,UAClB,eAAgB,CAAEA,IAAK,aACvB,UAAa,CAAEA,IAAK,aACpB,cAAe,CAAEA,IAAK,YACtB,SAAY,CAAEA,IAAK,YACnB,YAAa,CAAEA,IAAK,UACpB,OAAU,CAAEA,IAAK,UACjB,cAAe,CAAEA,IAAK,YACtB,SAAY,CAAEA,IAAK,YACnB,YAAa,CAAEA,IAAK,UACpB,OAAU,CAAEA,IAAK,UAGjB,OAAQ,CAAEC,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,GAAM,CAAEA,KAAM,SACd,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,OAAQ,CAAEA,KAAM,SAChB,EAAK,CAAEA,KAAM,SACb,QAAS,CAAEA,KAAM,SACjB,GAAM,CAAEA,KAAM,SACd,QAAS,CAAEA,KAAM,SACjB,GAAM,CAAEA,KAAM,SACd,QAAS,CAAEA,KAAM,SACjB,GAAM,CAAEA,KAAM,UAGZC,EAA6D,CAE/D,IAAO,CAAEC,SAAS,GAClB,YAAa,CAAEA,SAAS,GACxB,QAAW,CAAEA,SAAS,GACtB,YAAa,CAAEA,SAAS,GACxB,KAAQ,CAAEA,SAAS,GACnB,OAAU,CAAEA,SAAS,GACrB,WAAc,CAAEA,SAAS,GACzB,OAAU,CAAEA,SAAS,GAErB,GAAM,CAAEA,SAAS,GACjB,KAAQ,CAAEA,SAAS,GACnB,IAAO,CAAEA,SAAS,GAClB,SAAY,CAAEA,SAAS,GACvB,YAAa,CAAEA,SAAS,GACxB,YAAa,CAAEA,SAAS,GACxB,aAAc,CAAEA,SAAS,IAIhBC,EAAuD,CAChEC,QAAS,UACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,YAGfC,QAAS,CACLL,QAAS,SACTG,GAAI,CAAEG,UAAW,OACjBL,OAAQ,CACJM,OAAQ,CAAEC,MAAOtB,EAAI,kCAG7BuB,IAAK,CACDT,QAAS,SACTG,GAAI,CACAO,WAAY,CAAC,CACTC,KAAOC,GAAY,WAAanB,EAAQmB,EAAQC,YAAc,IAC9DC,QAASC,aAAQH,IAAqB,CAAElB,OAAQD,EAAQmB,EAAQC,WAAWnB,WAC3EsB,OAAQ,OAGZ,CAAEA,OAAQ,cAEdf,OAAQ,CACJM,OAAQ,CACJC,MAAOtB,EAAI,6BACXiB,GAAI,CAAEG,UAAW,QAErBW,IAAK,CACDT,MAAOhB,KAEX0B,QAAS,CACLV,MAAOtB,EAAI,4BACXiB,GAAI,CAAEG,UAAW,aAI7BX,IAAK,CACDK,QAAS,SACTG,GAAI,CACAO,WAAY,CAAC,CACTC,KAAOC,GAAY,QAAUnB,EAAQmB,EAAQC,YAAc,IAC3DC,QAASC,aAAQH,IAAqB,CAAEjB,IAAKF,EAAQmB,EAAQC,WAAWlB,QACxEqB,OAAQ,YAGZ,CAAEA,OAAQ,cAEdf,OAAQ,CACJM,OAAQ,CACJC,MAAOpB,aAAMwB,IAAD,CACRtB,KAAM,QACNC,MAAM,OAAD,OAASqB,EAAQlB,OAAjB,uCAETS,GAAI,CAAEG,UAAW,QAErBW,IAAK,CACDT,MAAOhB,KAEX0B,QAAS,CACLV,MAAOtB,EAAI,+BACXiB,GAAI,CAAEG,UAAW,aAM7Ba,SAAU,CACNnB,QAAS,SACTG,GAAI,CACAO,WAAY,CAAC,CACTC,KAAOC,IAA0D,IAA9Cf,EAAee,EAAQC,WAAWf,QACrDgB,QAASC,aAAQH,IAAqB,CAAEd,QAASD,EAAee,EAAQC,WAAWf,YACnFkB,OAAQ,yBAGZ,CACIL,KAAOC,IAA0D,IAA9Cf,EAAee,EAAQC,WAAWf,QACrDgB,QAASC,aAAQH,IAAqB,CAAEd,QAASD,EAAee,EAAQC,WAAWf,YACnFkB,OAAQ,sBAGZ,CAAEA,OAAQ,cAEdf,OAAQ,CACJM,OAAQ,CACJC,MAAOpB,aAAMwB,IAAD,CACRtB,KAAM,QACNC,MAAM,OAAD,OAASqB,EAAQjB,IAAjB,qCAETQ,GAAI,CAAEG,UAAW,QAErBW,IAAK,CACDT,MAAOhB,KAEX0B,QAAS,CACLV,MAAOtB,EAAI,uCACXiB,GAAI,CAAEG,UAAW,aAM7Bc,sBAAuB,CACnBpB,QAAS,SACTG,GAAI,CACAO,WAAY,CAAC,CACTC,KAAOC,IAA0D,IAA9Cf,EAAee,EAAQC,WAAWf,QACrDgB,QAASC,aAAQH,IAAqB,CAAEd,QAASD,EAAee,EAAQC,WAAWf,YACnFkB,OAAQ,sBAGZ,CACIL,KAAOC,IAA0D,IAA9Cf,EAAee,EAAQC,WAAWf,QACrDgB,QAASC,aAAQH,IAAqB,CAAEd,QAASD,EAAee,EAAQC,WAAWf,YACnFkB,OAAQ,OAGZ,CAAEA,OAAQ,cAEdf,OAAQ,CACJM,OAAQ,CACJC,MAAOpB,aAAMwB,IAAD,CACRtB,KAAM,QACNC,MAAM,oDAAD,OAAsDqB,EAAQlB,OAA9D,eAA2EkB,EAAQjB,IAAnF,2BAETQ,GAAI,CAAEG,UAAW,QAErBW,IAAK,CACDT,MAAOhB,KAEX0B,QAAS,CACLV,MAAOtB,EAAI,uCACXiB,GAAI,CAAEG,UAAW,aAK7Be,mBAAoB,CAChBrB,QAAS,SACTG,GAAI,CACAO,WAAY,CAAC,CACTC,KAAOC,GAAY,SAAWnB,EAAQmB,EAAQC,YAAc,IAC5DC,QAASC,aAAQH,IAAqB,CAAEhB,KAAMH,EAAQmB,EAAQC,WAAWjB,SACzEoB,OAAQ,gBAGZ,CAAEA,OAAQ,cAEdf,OAAQ,CACJM,OAAQ,CACJC,MAAOtB,EAAI,mEACXiB,GAAI,CAAEG,UAAW,QAErBW,IAAK,CACDT,MAAOhB,KAEX0B,QAAS,CACLV,MAAOtB,EAAI,iCACXiB,GAAI,CAAEG,UAAW,aAK7BgB,aAAc,CACVtB,QAAS,SACTG,GAAI,CACAO,WAAY,CAAC,CACTC,KAAOC,IAA0D,IAA9Cf,EAAee,EAAQC,WAAWf,QACrDgB,QAASC,aAAQH,IAAqB,CAAEd,QAASD,EAAee,EAAQC,WAAWf,YACnFkB,OAAQ,sBAGZ,CACIL,KAAOC,IAA0D,IAA9Cf,EAAee,EAAQC,WAAWf,QACrDgB,QAASC,aAAQH,IAAqB,CAAEd,QAASD,EAAee,EAAQC,WAAWf,YACnFkB,OAAQ,OAGZ,CAAEA,OAAQ,cAEdf,OAAQ,CACJM,OAAQ,CACJC,MAAOpB,aAAMwB,IAAD,CACRtB,KAAM,QACNC,MAAM,oDAAD,OAAsDqB,EAAQlB,OAA9D,eAA2EkB,EAAQjB,IAAnF,eAA6FiB,EAAQhB,KAArG,UAETO,GAAI,CAAEG,UAAW,QAErBW,IAAK,CACDT,MAAOhB,KAEX0B,QAAS,CACLV,MAAOtB,EAAI,uCACXiB,GAAI,CAAEG,UAAW,aAK7BiB,mBAAoB,CAChBvB,QAAS,SACTG,GAAI,CACAG,UAAW,QACfL,OAAQ,CACJM,OAAQ,CAAEC,MAAOtB,EAAI,0CCrRrC,MAWasC,EAAqD,CAC9DxB,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,YAGtBC,QAAQ,aACJF,GAAI,CACPO,WAAY,CACRM,OAAQ,cACRF,QAASC,aAAQH,IAAqB,CAAEa,UAAWb,EAAQC,kBArC3CN,EAwCD,mCAvCT,CACXP,QAAS,SACTC,OAAQ,CACGM,OAAQ,CAClBC,MAAOtB,EAAIqB,GACXJ,GAAI,CAAEG,UAAW,QAEPW,IAAK,CACfT,MAAOpB,YAAK,eAkCbsC,YAAa,CACTC,OAAQ,CACXC,GAAI,SACUC,IAAK,CAACjB,EAASkB,KAAUC,OA7Bd5C,EA6ByByB,EAAQa,UA5BxDO,MAAM,IAAIC,QAAQC,sFAAmB,CACjCC,OAAQ,OACRC,QAAS,CAAE,OAAU,oBACrBC,KAAK,aAAD,OAAelD,EAAf,SAEHmD,MAAKC,GAAQA,EAAKC,SANArD,OA8BXsD,OAAQ,CACJzB,OAAQ,SACRF,QAAS,CAACC,aAAO,CAACH,EAASkB,KAAmB,CAACY,YAAaZ,EAAMS,KAAKI,OAAOC,SACzF,CAAChC,EAAoBkB,IAAce,QAAQC,IAAIhB,EAAMS,QAE5DQ,QAAS,CACS/B,OAAQ,UACtBF,QAAS,CAACF,EAAQkB,IAAUe,QAAQC,IAAIhB,EAAMS,SAIhDS,OAAQ,CACPxC,MAAOpB,YAAK,cACZe,GAAI,CACGO,WAAY,CACR,CAAEM,OAAQ,cAAeL,KAAOC,GAAoC,gBAAxBA,EAAQ8B,aACpD,CAAE1B,OAAQ,QAASL,KAAOC,GAAoC,UAAxBA,EAAQ8B,aAC9C,CAAE1B,OAAQ,YAAaL,KAAOC,GAAoC,cAAxBA,EAAQ8B,gBAI9DO,YAAY,eACLlD,GAEPmD,UAAW,CACPlD,QAAS,SACTC,OAAQ,CACJM,OAAQ,CAAEC,MAAOtB,EAAI,uCAG7BiE,MAAO,CACHnD,QAAS,SACTC,OAAQ,CACJM,OAAQ,CAACC,MAAOtB,EAAI,sDAhFhC,IAAsBqB,E,gBCMtB6C,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAMZ,MAAMC,EAAUC,YAAmC,CAC/C5B,GAAI,OACJtC,KAAM,WACNW,OAAQ,CACJwD,GAAG,eACIjC,GAEPkC,OAAQ,CACJ1D,QAAS,OACTC,OAAQ,CACJ0D,KAAM,CACFxD,GAAI,CACAyD,OAAQ,cACRC,MAAO,CACH7C,OAAQ,WACRF,QAASC,aAAO,CAAC1B,EAAUyC,KAAmB,CAAEgC,UAAWhC,EAAMvC,aAI7EwE,YAAa,CACTvD,MAAO,WACPwD,KAAM,UACN7D,GAAI,CACA8D,UAAW,CACPnD,QAAS,CAAC,eACNC,aAAO,CAAC1B,EAAUyC,KAAmB,CAAEjB,UAAWiB,EAAMvC,WAC5DyB,OAAQ,UAEZN,WAAY,QAEhBT,OAAQ,CACJiE,MAAO,CACH1D,MAAOpB,YAAK,iBAIxB+E,SAAU,CACN3D,MAAO,WACPL,GAAI,CACAG,UAAW,aAO/B,CACIQ,QAAS,CACLsD,aAAexD,IAEXiC,QAAQC,IAAI,WAAalC,EAAQC,YAErCwD,KAAM,KACFxB,QAAQC,IAAI,SAEhBwB,UAAY1D,IAERiC,QAAQC,IAAI,kBAAoBlC,EAAQ2D,QAAQ5B,OAAOC,UAUjE4B,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAEjB,OAAQ,gBAC/B,OACI,gDAAQpE,KAAK,SAASsF,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAEjB,OAAQ,aAC/B,OACI,gDAAQpE,KAAK,SAASsF,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQnF,KAAK,SAASsF,UAAU,iBAAoBH,GAApD,mCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACH7F,EAAK,gBAFL8F,EADG,EACHA,MAAOC,EADJ,EACIA,OADJ,KACYhB,SAKaiB,+BAAqB,CACrDC,SAAWC,IACPlG,EAAK,CAAEE,KAAM,YAAaC,MAAO+F,QAFjC9F,EANG,EAMHA,OAAmB+F,GANhB,EAMKC,UANL,EAMgBD,MANhB,EAWsBE,YAAWlC,EAAS,CACjDmC,UAAU,EACV5E,QAAS,CACL6E,SAAUC,aAAS,KACf/C,QAAQC,IAAI,qCACZtD,EAAO,CACHqG,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACd/C,QAAQC,IAAI,wBACZyC,OAEJS,aAAcJ,aAAUhF,IACpBiC,QAAQC,IAAI,iBACZmD,SAAS5D,KAAKwC,MAAMqB,WAAatF,EAAQC,aAE7CsF,SAAUP,aAAS,CAAChF,EAASwF,KACzBvD,QAAQC,IAAI,eACZoC,EAAM,CAAE/F,KAAMyB,EAAQkD,eAE1BuC,UAAWT,aAAS,CAAChF,EAASwF,KAC1BvD,QAAQC,IAAI,eACZqC,UAnCD,mBAWJmB,EAXI,KAWKlH,EAXL,UA6CX,OACI,qBAAKwF,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO4B,EAASC,QAAS,IAAMnH,EAAK,aAShE,MAUMoH,EAAcP,SAASQ,eAAe,QAC5CC,SACI,cAAC3B,EAAD,IACAyB,K","file":"static/js/main.6c041f06.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { dmMkapp } from \"./mkapp\";\n\n\n\nexport function say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport function listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    //PERSON\n    \"John\": { person: \"John Appleseed\" },\n    \"Olivia\": { person: \"Olivia Smith\" },\n    \"Daniel\": { person: \"Daniel Jones\" },\n    \"James\": { person: \"James Williams\" },\n    \"Mia\": { person: \"Mia Wilson\" },\n    \"Jack\": { person: \"Jack Evans\" },\n    \"Emily\": { person: \"Emily Thomas\" },\n    \n    //DAYS\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesda\" },\n    \"Tuesday\": { day: \"Tuesda\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    //TIMES\n    \"at 1\": { time: \"01:00\" },\n    \"1\": { time: \"01:00\" },\n    \"at 2\": { time: \"02:00\" },\n    \"2\": { time: \"02:00\" },\n    \"at 3\": { time: \"03:00\" },\n    \"t3\": { time: \"03:00\" },\n    \"at 4\": { time: \"04:00\" },\n    \"4\": { time: \"04:00\" },\n    \"at 5\": { time: \"05:00\" },\n    \"5\": { time: \"05:00\" },\n    \"at 6\": { time: \"06:00\" },\n    \"6\": { time: \"06:00\" },\n    \"at 7\": { time: \"07:00\" },\n    \"7\": { time: \"07:00\" },\n    \"at 8\": { time: \"08:00\" },\n    \"8\": { time: \"08:00\" },\n    \"at 9\": { time: \"09:00\" },\n    \"9\": { time: \"09:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"12\": { time: \"12:00\" }\n}\n\nconst BooleanGrammar: { [index: string]: { clarity?: boolean } } = {\n    //TRUE\n    \"yes\": { clarity: true },\n    \"of course\": { clarity: true },\n    \"alright\": { clarity: true },\n    \"very well\": { clarity: true },\n    \"sure\": { clarity: true },\n    \"agreed\": { clarity: true },\n    \"absolutely\": { clarity: true },\n    \"surely\": { clarity: true },\n    //FALSE\n    \"no\": { clarity: false },\n    \"nope\": { clarity: false },\n    \"nah\": { clarity: false },\n    \"negative\": { clarity: false },\n    \"no indeed\": { clarity: false },\n    \"no thanks\": { clarity: false },\n    \"not at all\": { clarity: false }\n\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know the day \"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === true,\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\n                    target: \"wholeday_is_confirmed\"\n\n                },\n                {\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === false,\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\n                    target: \"Determination_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch what you said \"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n\n        wholeday_is_confirmed: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === true,\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\n                    target: \"create_appointment\"\n\n                },\n                {\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === false,\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\n                    target: \"who\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch what you said \"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        Determination_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Ok. The meeting is not the whole day.What time is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't underestand it \"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        confirm_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === true,\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\n                    target: \"create_appointment\"\n\n                },\n                {\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === false,\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\n                    target: \"who\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch what you said \"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        create_appointment: {\n            initial: \"prompt\",\n            on: { \n                ENDSPEECH: \"init\" },\n            states: {\n                prompt: { entry: say(\"Your appointment has been created\") }\n            }\n        },\n    \n    },\n})\n        \n\n\n\n\n\n\n\n\n  \n            \n\n","import { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { dmMachine, say, listen } from \"./dmAppointment\";\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n\t\tentry: say(prompt),\r\n\t\ton: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\tentry: send('LISTEN'),\r\n            },\r\n\t}})\r\n};\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://mkappointment.herokuapp.com/model/parse'\r\n\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyUrl+ rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nexport const dmMkapp: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }    \r\n        },\r\n\twelcome: {\r\n\t    on: {\r\n\t\tRECOGNISED: {\r\n\t\t    target: 'invok_guery',\r\n\t\t    actions: assign((context) => { return { statement: context.recResult } }),\r\n            },\r\n        },\r\n\t    ...promptAndAsk(\"What would you prefer to do now?\")\r\n\t},\r\n\r\n\tinvok_guery: {\r\n\t    invoke: {\r\n\t\tid: 'decide',\r\n                src: (context, event) => nluRequest(context.statement),\r\n                onDone: {\r\n                    target: 'select',\r\n                    actions: [assign((context, event) => { return {rasa_finder: event.data.intent.name }}),\r\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n\t\tonError: {\r\n                    target: 'welcome',\r\n\t\t    actions: (context,event) => console.log(event.data)\r\n                }\r\n            }\r\n\t},\r\n    select: {\r\n\t    entry: send('RECOGNISED'),\r\n\t    on: {\r\n            RECOGNISED: [\r\n                { target: 'appointment', cond: (context) => context.rasa_finder === \"appointment\" },\r\n                { target: 'timer', cond: (context) => context.rasa_finder === \"timer\"},\r\n                { target: 'TODO_item', cond: (context) => context.rasa_finder === \"TODO_item\"},               \r\n            ]   \r\n        },\r\n\t},\r\n    appointment: {\r\n        ...dmMachine\r\n    },\r\n    TODO_item: {\r\n        initial: \"prompt\",\r\n        states: {\r\n            prompt: { entry: say(\"let's add the item to todo list.\") }\r\n        }\r\n    },\r\n    timer: {\r\n        initial: \"prompt\",\r\n        states: {\r\n            prompt: {entry: say(\"So you need a timer,let me update it for you.\") }\r\n        }} \r\n    }})\r\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMkapp } from \"./mkapp\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMkapp\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mkappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}